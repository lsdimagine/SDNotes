<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSLexPostTextResponse.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSLexPostTextResponse</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
            
			
			<NodeRef refid="964"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLexPostTextResponse/setDialogState:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; Identifies the current state of the user interaction. Amazon Lex returns one of the following values as &lt;code&gt;dialogState&lt;/code&gt;. The client can optionally use this information to customize the user interface. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;ElicitIntent&lt;/code&gt; – Amazon Lex wants to elicit user intent. &lt;/p&gt;&lt;p&gt;For example, a user might utter an intent (&quot;I want to order a pizza&quot;). If Amazon Lex cannot infer the user intent from this utterance, it will return this dialogState.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;ConfirmIntent&lt;/code&gt; – Amazon Lex is expecting a &quot;yes&quot; or &quot;no&quot; response. &lt;/p&gt;&lt;p&gt; For example, Amazon Lex wants user confirmation before fulfilling an intent. &lt;/p&gt;&lt;p&gt;Instead of a simple &quot;yes&quot; or &quot;no,&quot; a user might respond with additional information. For example, &quot;yes, but make it thick crust pizza&quot; or &quot;no, I want to order a drink&quot;. Amazon Lex can process such additional information (in these examples, update the crust type slot value, or change intent from OrderPizza to OrderDrink).&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;ElicitSlot&lt;/code&gt; – Amazon Lex is expecting a slot value for the current intent. &lt;/p&gt;&lt;p&gt;For example, suppose that in the response Amazon Lex sends this message: &quot;What size pizza would you like?&quot;. A user might reply with the slot value (e.g., &quot;medium&quot;). The user might also provide additional information in the response (e.g., &quot;medium thick crust pizza&quot;). Amazon Lex can process such additional information appropriately. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;Fulfilled&lt;/code&gt; – Conveys that the Lambda function configured for the intent has successfully fulfilled the intent. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;ReadyForFulfillment&lt;/code&gt; – Conveys that the client has to fulfill the intent. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;Failed&lt;/code&gt; – Conveys that the conversation with the user failed. &lt;/p&gt;&lt;p&gt; This can happen for various reasons including that the user did not provide an appropriate response to prompts from the service (you can configure how many times Amazon Lex can prompt a user for specific information), or the Lambda function failed to fulfill the intent. &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSLexDialogState dialogState</Declaration>
			
			
			<Anchor>//api/name/dialogState</Anchor>
            <NodeRef refid="964"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLexPostTextResponse/dialogState</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; Identifies the current state of the user interaction. Amazon Lex returns one of the following values as &lt;code&gt;dialogState&lt;/code&gt;. The client can optionally use this information to customize the user interface. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;ElicitIntent&lt;/code&gt; – Amazon Lex wants to elicit user intent. &lt;/p&gt;&lt;p&gt;For example, a user might utter an intent (&quot;I want to order a pizza&quot;). If Amazon Lex cannot infer the user intent from this utterance, it will return this dialogState.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;ConfirmIntent&lt;/code&gt; – Amazon Lex is expecting a &quot;yes&quot; or &quot;no&quot; response. &lt;/p&gt;&lt;p&gt; For example, Amazon Lex wants user confirmation before fulfilling an intent. &lt;/p&gt;&lt;p&gt;Instead of a simple &quot;yes&quot; or &quot;no,&quot; a user might respond with additional information. For example, &quot;yes, but make it thick crust pizza&quot; or &quot;no, I want to order a drink&quot;. Amazon Lex can process such additional information (in these examples, update the crust type slot value, or change intent from OrderPizza to OrderDrink).&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;ElicitSlot&lt;/code&gt; – Amazon Lex is expecting a slot value for the current intent. &lt;/p&gt;&lt;p&gt;For example, suppose that in the response Amazon Lex sends this message: &quot;What size pizza would you like?&quot;. A user might reply with the slot value (e.g., &quot;medium&quot;). The user might also provide additional information in the response (e.g., &quot;medium thick crust pizza&quot;). Amazon Lex can process such additional information appropriately. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;Fulfilled&lt;/code&gt; – Conveys that the Lambda function configured for the intent has successfully fulfilled the intent. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;ReadyForFulfillment&lt;/code&gt; – Conveys that the client has to fulfill the intent. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;Failed&lt;/code&gt; – Conveys that the conversation with the user failed. &lt;/p&gt;&lt;p&gt; This can happen for various reasons including that the user did not provide an appropriate response to prompts from the service (you can configure how many times Amazon Lex can prompt a user for specific information), or the Lambda function failed to fulfill the intent. &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSLexDialogState dialogState</Declaration>
			
			
			<Anchor>//api/name/dialogState</Anchor>
            <NodeRef refid="964"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLexPostTextResponse/dialogState</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; Identifies the current state of the user interaction. Amazon Lex returns one of the following values as &lt;code&gt;dialogState&lt;/code&gt;. The client can optionally use this information to customize the user interface. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;ElicitIntent&lt;/code&gt; – Amazon Lex wants to elicit user intent. &lt;/p&gt;&lt;p&gt;For example, a user might utter an intent (&quot;I want to order a pizza&quot;). If Amazon Lex cannot infer the user intent from this utterance, it will return this dialogState.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;ConfirmIntent&lt;/code&gt; – Amazon Lex is expecting a &quot;yes&quot; or &quot;no&quot; response. &lt;/p&gt;&lt;p&gt; For example, Amazon Lex wants user confirmation before fulfilling an intent. &lt;/p&gt;&lt;p&gt;Instead of a simple &quot;yes&quot; or &quot;no,&quot; a user might respond with additional information. For example, &quot;yes, but make it thick crust pizza&quot; or &quot;no, I want to order a drink&quot;. Amazon Lex can process such additional information (in these examples, update the crust type slot value, or change intent from OrderPizza to OrderDrink).&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;ElicitSlot&lt;/code&gt; – Amazon Lex is expecting a slot value for the current intent. &lt;/p&gt;&lt;p&gt;For example, suppose that in the response Amazon Lex sends this message: &quot;What size pizza would you like?&quot;. A user might reply with the slot value (e.g., &quot;medium&quot;). The user might also provide additional information in the response (e.g., &quot;medium thick crust pizza&quot;). Amazon Lex can process such additional information appropriately. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;Fulfilled&lt;/code&gt; – Conveys that the Lambda function configured for the intent has successfully fulfilled the intent. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;ReadyForFulfillment&lt;/code&gt; – Conveys that the client has to fulfill the intent. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;Failed&lt;/code&gt; – Conveys that the conversation with the user failed. &lt;/p&gt;&lt;p&gt; This can happen for various reasons including that the user did not provide an appropriate response to prompts from the service (you can configure how many times Amazon Lex can prompt a user for specific information), or the Lambda function failed to fulfill the intent. &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSLexDialogState dialogState</Declaration>
			
			
			<Anchor>//api/name/dialogState</Anchor>
            <NodeRef refid="964"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLexPostTextResponse/setIntentName:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The current user intent that Amazon Lex is aware of.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *intentName</Declaration>
			
			
			<Anchor>//api/name/intentName</Anchor>
            <NodeRef refid="964"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLexPostTextResponse/intentName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The current user intent that Amazon Lex is aware of.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *intentName</Declaration>
			
			
			<Anchor>//api/name/intentName</Anchor>
            <NodeRef refid="964"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLexPostTextResponse/intentName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The current user intent that Amazon Lex is aware of.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *intentName</Declaration>
			
			
			<Anchor>//api/name/intentName</Anchor>
            <NodeRef refid="964"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLexPostTextResponse/setMessage:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; A message to convey to the user. It can come from the bot&apos;s configuration or a code hook (Lambda function). If the current intent is not configured with a code hook or the code hook returned &lt;code&gt;Delegate&lt;/code&gt; as the &lt;code&gt;dialogAction.type&lt;/code&gt; in its response, then Amazon Lex decides the next course of action and selects an appropriate message from the bot configuration based on the current user interaction context. For example, if Amazon Lex is not able to understand the user input, it uses a clarification prompt message (for more information, see the Error Handling section in the Amazon Lex console). Another example: if the intent requires confirmation before fulfillment, then Amazon Lex uses the confirmation prompt message in the intent configuration. If the code hook returns a message, Amazon Lex passes it as-is in its response to the client. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *message</Declaration>
			
			
			<Anchor>//api/name/message</Anchor>
            <NodeRef refid="964"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLexPostTextResponse/message</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; A message to convey to the user. It can come from the bot&apos;s configuration or a code hook (Lambda function). If the current intent is not configured with a code hook or the code hook returned &lt;code&gt;Delegate&lt;/code&gt; as the &lt;code&gt;dialogAction.type&lt;/code&gt; in its response, then Amazon Lex decides the next course of action and selects an appropriate message from the bot configuration based on the current user interaction context. For example, if Amazon Lex is not able to understand the user input, it uses a clarification prompt message (for more information, see the Error Handling section in the Amazon Lex console). Another example: if the intent requires confirmation before fulfillment, then Amazon Lex uses the confirmation prompt message in the intent configuration. If the code hook returns a message, Amazon Lex passes it as-is in its response to the client. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *message</Declaration>
			
			
			<Anchor>//api/name/message</Anchor>
            <NodeRef refid="964"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLexPostTextResponse/message</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; A message to convey to the user. It can come from the bot&apos;s configuration or a code hook (Lambda function). If the current intent is not configured with a code hook or the code hook returned &lt;code&gt;Delegate&lt;/code&gt; as the &lt;code&gt;dialogAction.type&lt;/code&gt; in its response, then Amazon Lex decides the next course of action and selects an appropriate message from the bot configuration based on the current user interaction context. For example, if Amazon Lex is not able to understand the user input, it uses a clarification prompt message (for more information, see the Error Handling section in the Amazon Lex console). Another example: if the intent requires confirmation before fulfillment, then Amazon Lex uses the confirmation prompt message in the intent configuration. If the code hook returns a message, Amazon Lex passes it as-is in its response to the client. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *message</Declaration>
			
			
			<Anchor>//api/name/message</Anchor>
            <NodeRef refid="964"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLexPostTextResponse/setResponseCard:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Represents the options that the user has to respond to the current prompt. Response Card can come from the bot configuration (in the Amazon Lex console, choose the settings button next to a slot) or from a code hook (Lambda function). &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) AWSLexResponseCard *responseCard</Declaration>
			
			
			<Anchor>//api/name/responseCard</Anchor>
            <NodeRef refid="964"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLexPostTextResponse/responseCard</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Represents the options that the user has to respond to the current prompt. Response Card can come from the bot configuration (in the Amazon Lex console, choose the settings button next to a slot) or from a code hook (Lambda function). &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) AWSLexResponseCard *responseCard</Declaration>
			
			
			<Anchor>//api/name/responseCard</Anchor>
            <NodeRef refid="964"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLexPostTextResponse/responseCard</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Represents the options that the user has to respond to the current prompt. Response Card can come from the bot configuration (in the Amazon Lex console, choose the settings button next to a slot) or from a code hook (Lambda function). &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) AWSLexResponseCard *responseCard</Declaration>
			
			
			<Anchor>//api/name/responseCard</Anchor>
            <NodeRef refid="964"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLexPostTextResponse/setSessionAttributes:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A map of key-value pairs representing the session-specific context information.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary&lt;NSString*NSString*&gt; *sessionAttributes</Declaration>
			
			
			<Anchor>//api/name/sessionAttributes</Anchor>
            <NodeRef refid="964"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLexPostTextResponse/sessionAttributes</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A map of key-value pairs representing the session-specific context information.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary&lt;NSString*NSString*&gt; *sessionAttributes</Declaration>
			
			
			<Anchor>//api/name/sessionAttributes</Anchor>
            <NodeRef refid="964"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLexPostTextResponse/sessionAttributes</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A map of key-value pairs representing the session-specific context information.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary&lt;NSString*NSString*&gt; *sessionAttributes</Declaration>
			
			
			<Anchor>//api/name/sessionAttributes</Anchor>
            <NodeRef refid="964"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLexPostTextResponse/setSlotToElicit:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;If the &lt;code&gt;dialogState&lt;/code&gt; value is &lt;code&gt;ElicitSlot&lt;/code&gt;, returns the name of the slot for which Amazon Lex is eliciting a value. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *slotToElicit</Declaration>
			
			
			<Anchor>//api/name/slotToElicit</Anchor>
            <NodeRef refid="964"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLexPostTextResponse/slotToElicit</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;If the &lt;code&gt;dialogState&lt;/code&gt; value is &lt;code&gt;ElicitSlot&lt;/code&gt;, returns the name of the slot for which Amazon Lex is eliciting a value. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *slotToElicit</Declaration>
			
			
			<Anchor>//api/name/slotToElicit</Anchor>
            <NodeRef refid="964"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLexPostTextResponse/slotToElicit</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;If the &lt;code&gt;dialogState&lt;/code&gt; value is &lt;code&gt;ElicitSlot&lt;/code&gt;, returns the name of the slot for which Amazon Lex is eliciting a value. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *slotToElicit</Declaration>
			
			
			<Anchor>//api/name/slotToElicit</Anchor>
            <NodeRef refid="964"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLexPostTextResponse/setSlots:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; The intent slots (name/value pairs) that Amazon Lex detected so far from the user input in the conversation. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary&lt;NSString*NSString*&gt; *slots</Declaration>
			
			
			<Anchor>//api/name/slots</Anchor>
            <NodeRef refid="964"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLexPostTextResponse/slots</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; The intent slots (name/value pairs) that Amazon Lex detected so far from the user input in the conversation. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary&lt;NSString*NSString*&gt; *slots</Declaration>
			
			
			<Anchor>//api/name/slots</Anchor>
            <NodeRef refid="964"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLexPostTextResponse/slots</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; The intent slots (name/value pairs) that Amazon Lex detected so far from the user input in the conversation. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary&lt;NSString*NSString*&gt; *slots</Declaration>
			
			
			<Anchor>//api/name/slots</Anchor>
            <NodeRef refid="964"/>
		</Token>
		
        
        
	</File>
</Tokens>