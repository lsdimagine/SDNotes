<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSCognitoAuth.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoAuth</TokenIdentifier>
			<Abstract type="html">A lightweight web-based ui to manage signup/signin of your end users</Abstract>
			<DeclaredIn>AWSCognitoAuth.h</DeclaredIn>
            
			
			<NodeRef refid="137"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/setDelegate:</TokenIdentifier>
			<Abstract type="html">Set this delegate to obtain the current view controller to interact with the end user</Abstract>
			<DeclaredIn>AWSCognitoAuth.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id&lt;AWSCognitoAuthDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/delegate</TokenIdentifier>
			<Abstract type="html">Set this delegate to obtain the current view controller to interact with the end user</Abstract>
			<DeclaredIn>AWSCognitoAuth.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id&lt;AWSCognitoAuthDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoAuth/delegate</TokenIdentifier>
			<Abstract type="html">Set this delegate to obtain the current view controller to interact with the end user</Abstract>
			<DeclaredIn>AWSCognitoAuth.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id&lt;AWSCognitoAuthDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/setAuthConfiguration:</TokenIdentifier>
			<Abstract type="html">The auth configuration</Abstract>
			<DeclaredIn>AWSCognitoAuth.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) AWSCognitoAuthConfiguration *authConfiguration</Declaration>
			
			
			<Anchor>//api/name/authConfiguration</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/authConfiguration</TokenIdentifier>
			<Abstract type="html">The auth configuration</Abstract>
			<DeclaredIn>AWSCognitoAuth.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) AWSCognitoAuthConfiguration *authConfiguration</Declaration>
			
			
			<Anchor>//api/name/authConfiguration</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoAuth/authConfiguration</TokenIdentifier>
			<Abstract type="html">The auth configuration</Abstract>
			<DeclaredIn>AWSCognitoAuth.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) AWSCognitoAuthConfiguration *authConfiguration</Declaration>
			
			
			<Anchor>//api/name/authConfiguration</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/setSignedIn:</TokenIdentifier>
			<Abstract type="html">Determines whether there is an active session or not. If the refresh token is expired
the end user will be prompted to authenticate when you call getSession.</Abstract>
			<DeclaredIn>AWSCognitoAuth.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isSignedIn) BOOL signedIn</Declaration>
			
			
			<Anchor>//api/name/signedIn</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/isSignedIn</TokenIdentifier>
			<Abstract type="html">Determines whether there is an active session or not. If the refresh token is expired
the end user will be prompted to authenticate when you call getSession.</Abstract>
			<DeclaredIn>AWSCognitoAuth.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isSignedIn) BOOL signedIn</Declaration>
			
			
			<Anchor>//api/name/signedIn</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoAuth/signedIn</TokenIdentifier>
			<Abstract type="html">Determines whether there is an active session or not. If the refresh token is expired
the end user will be prompted to authenticate when you call getSession.</Abstract>
			<DeclaredIn>AWSCognitoAuth.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isSignedIn) BOOL signedIn</Declaration>
			
			
			<Anchor>//api/name/signedIn</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSCognitoAuth/defaultCognitoAuth</TokenIdentifier>
			<Abstract type="html">Fetches the Cognito User Pool instance configured in the info.plist under AWS-&gt;CognitoUserPool-&gt;Default</Abstract>
			<DeclaredIn>AWSCognitoAuth.h</DeclaredIn>
			
			<Declaration>+ (instancetype)defaultCognitoAuth</Declaration>
			
			<ReturnValue><Abstract type="html">the default instance for Cognito Auth</Abstract></ReturnValue>
			<Anchor>//api/name/defaultCognitoAuth</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSCognitoAuth/registerCognitoAuthWithAuthConfiguration:forKey:</TokenIdentifier>
			<Abstract type="html">Register a managed instance with name forKey and configuration authConfiguration.</Abstract>
			<DeclaredIn>AWSCognitoAuth.h</DeclaredIn>
			
			<Declaration>+ (void)registerCognitoAuthWithAuthConfiguration:(AWSCognitoAuthConfiguration *)authConfiguration forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>authConfiguration</Name>
					<Abstract type="html">the auth configuration</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">the key to register under</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/registerCognitoAuthWithAuthConfiguration:forKey:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSCognitoAuth/CognitoAuthForKey:</TokenIdentifier>
			<Abstract type="html">Fetch a managed instance with a particular AuthConfiguration.</Abstract>
			<DeclaredIn>AWSCognitoAuth.h</DeclaredIn>
			
			<Declaration>+ (instancetype)CognitoAuthForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">the key to fetch</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">the CognitoAuth object</Abstract></ReturnValue>
			<Anchor>//api/name/CognitoAuthForKey:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSCognitoAuth/removeCognitoAuthForKey:</TokenIdentifier>
			<Abstract type="html">Unregister a managed instance.</Abstract>
			<DeclaredIn>AWSCognitoAuth.h</DeclaredIn>
			
			<Declaration>+ (void)removeCognitoAuthForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">key to remove the object for</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeCognitoAuthForKey:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/getSession:completion:</TokenIdentifier>
			<Abstract type="html">Get a session with id, access and refresh tokens.</Abstract>
			<DeclaredIn>AWSCognitoAuth.h</DeclaredIn>
			
			<Declaration>- (void)getSession:(UIViewController *)vc completion:(nullable AWSCognitoAuthGetSessionBlock)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>vc</Name>
					<Abstract type="html">viewController to display the UI on if needed during sign in.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">completion block to invoke on completion</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getSession:completion:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/getSession:</TokenIdentifier>
			<Abstract type="html">Get a session with id, access and refresh tokens, use delegate to get view controller.</Abstract>
			<DeclaredIn>AWSCognitoAuth.h</DeclaredIn>
			
			<Declaration>- (void)getSession:(nullable AWSCognitoAuthGetSessionBlock)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>completion</Name>
					<Abstract type="html">completion block to invoke on completion</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getSession:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/signOut:completion:</TokenIdentifier>
			<Abstract type="html">Sign out locally and from the server.</Abstract>
			<DeclaredIn>AWSCognitoAuth.h</DeclaredIn>
			
			<Declaration>- (void)signOut:(UIViewController *)vc completion:(nullable AWSCognitoAuthSignOutBlock)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>vc</Name>
					<Abstract type="html">viewController to display the UI on during sign out.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">completion block to invoke on completion</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/signOut:completion:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/signOut:</TokenIdentifier>
			<Abstract type="html">Sign out locally and from the server, use delegate to get view controller.</Abstract>
			<DeclaredIn>AWSCognitoAuth.h</DeclaredIn>
			
			<Declaration>- (void)signOut:(nullable AWSCognitoAuthSignOutBlock)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>completion</Name>
					<Abstract type="html">completion block to invoke on completion</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/signOut:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/application:openURL:options:</TokenIdentifier>
			<Abstract type="html">Method to handle app redirect.  Call from AppDelegate application:openURL:options</Abstract>
			<DeclaredIn>AWSCognitoAuth.h</DeclaredIn>
			
			<Declaration>- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&lt;UIApplicationOpenURLOptionsKey,id&gt; *)options</Declaration>
			
			
			<Anchor>//api/name/application:openURL:options:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/enqueueGetSession:completion:</TokenIdentifier>
			<Abstract type="html">Adds another getSession operation to the serialized queue of getSession requests</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (void)enqueueGetSession:(nullable UIViewController *)vc completion:(AWSCognitoAuthGetSessionBlock)completion</Declaration>
			
			
			<Anchor>//api/name/enqueueGetSession:completion:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/cleanupSignIn</TokenIdentifier>
			<Abstract type="html">Cleanup resources from the sign in attempt</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (void)cleanupSignIn</Declaration>
			
			
			<Anchor>//api/name/cleanupSignIn</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/launchSignInVC:</TokenIdentifier>
			<Abstract type="html">Launch the sign in ui on the provided viewcontroller</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (void)launchSignInVC:(UIViewController *)vc</Declaration>
			
			
			<Anchor>//api/name/launchSignInVC:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/setPopoverSource:source:</TokenIdentifier>
			<Abstract type="html">Configure source view for a modal popup view controller</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (UIViewController *)setPopoverSource:(UIViewController *)popover source:(UIViewController *)source</Declaration>
			
			
			<Anchor>//api/name/setPopoverSource:source:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/getSessionInternal:completion:</TokenIdentifier>
			<Abstract type="html">Check keychain for valid session, if expired or not available, prompt end user via ui</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (void)getSessionInternal:(nullable UIViewController *)vc completion:(AWSCognitoAuthGetSessionBlock)completion</Declaration>
			
			
			<Anchor>//api/name/getSessionInternal:completion:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/completeGetSession:error:</TokenIdentifier>
			<Abstract type="html">Dismiss ui, invoke completion and cleanup a getSession call.</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (void)completeGetSession:(nullable AWSCognitoAuthUserSession *)userSession error:(nullable NSError *)error</Declaration>
			
			
			<Anchor>//api/name/completeGetSession:error:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/completeSignOut:</TokenIdentifier>
			<Abstract type="html">Dismiss ui, invoke completion and cleanup a signOut call.</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (void)completeSignOut:(nullable NSError *)error</Declaration>
			
			
			<Anchor>//api/name/completeSignOut:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/signOutInternal:completion:</TokenIdentifier>
			<Abstract type="html">Display ui for signout</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (void)signOutInternal:(UIViewController *)vc completion:(AWSCognitoAuthSignOutBlock)completion</Declaration>
			
			
			<Anchor>//api/name/signOutInternal:completion:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/signOutLocally</TokenIdentifier>
			<Abstract type="html">Remove user session from keychain</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (void)signOutLocally</Declaration>
			
			
			<Anchor>//api/name/signOutLocally</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/signOutLocallyAndClearLastKnownUser</TokenIdentifier>
			<Abstract type="html">Remove user session from keychain and clear last known username.</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (void)signOutLocallyAndClearLastKnownUser</Declaration>
			
			
			<Anchor>//api/name/signOutLocallyAndClearLastKnownUser</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/getDateFormatter</TokenIdentifier>
			<Abstract type="html">Obtain a date formatter for this format: yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (NSDateFormatter *)getDateFormatter</Declaration>
			
			
			<Anchor>//api/name/getDateFormatter</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/dateFromString:</TokenIdentifier>
			<Abstract type="html">Convert a string to date</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (NSDate *)dateFromString:(NSString *)string</Declaration>
			
			
			<Anchor>//api/name/dateFromString:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/stringValue:</TokenIdentifier>
			<Abstract type="html">Convert a string to date</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (NSString *)stringValue:(NSDate *)date</Declaration>
			
			
			<Anchor>//api/name/stringValue:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/safariViewControllerDidFinish:</TokenIdentifier>
			<Abstract type="html">Delegate callback called when the user taps the Done button. Upon this call, the view controller is dismissed modally.</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (void)safariViewControllerDidFinish:(SFSafariViewController *)controller</Declaration>
			
			
			<Anchor>//api/name/safariViewControllerDidFinish:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/safariViewController:didCompleteInitialLoad:</TokenIdentifier>
			<Abstract type="html">Invoked when the initial URL load is complete.</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (void)safariViewController:(SFSafariViewController *)controller didCompleteInitialLoad:(BOOL)didLoadSuccessfully</Declaration>
			<Parameters>
				<Parameter>
					<Name>didLoadSuccessfully</Name>
					<Abstract type="html">YES if loading completed successfully, NO if loading failed.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/safariViewController:didCompleteInitialLoad:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/generateRandom:</TokenIdentifier>
			<Abstract type="html">Generate a random number of size bytes and base64 encode it with a url safe encoding.</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (NSString *)generateRandom:(int)size</Declaration>
			
			
			<Anchor>//api/name/generateRandom:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/calculateSHA256Hash:</TokenIdentifier>
			<Abstract type="html">Calculate a SHA256 Hash of a string and base64 encode it with a url safe encoding.</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (NSString *)calculateSHA256Hash:(NSString *)string</Declaration>
			
			
			<Anchor>//api/name/calculateSHA256Hash:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/urlSafeBase64:</TokenIdentifier>
			<Abstract type="html">Make a base64 encoded string url safe</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (NSString *)urlSafeBase64:(NSString *)string</Declaration>
			
			
			<Anchor>//api/name/urlSafeBase64:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/urlEncode:</TokenIdentifier>
			<Abstract type="html">Make a string url safe
*</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (NSString *)urlEncode:(NSString *)stringToEncode</Declaration>
			
			
			<Anchor>//api/name/urlEncode:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/addHeaders:</TokenIdentifier>
			<Abstract type="html">Add authorization and User-Agent header as appropriate.</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (void)addHeaders:(NSMutableURLRequest *)request</Declaration>
			
			
			<Anchor>//api/name/addHeaders:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/dismissSafariVC</TokenIdentifier>
			<Abstract type="html">Dismiss and reap the safari view controller</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (void)dismissSafariVC</Declaration>
			
			
			<Anchor>//api/name/dismissSafariVC</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/clearAll</TokenIdentifier>
			<Abstract type="html">Removes everything from the keychain under this appClientId</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (void)clearAll</Declaration>
			
			
			<Anchor>//api/name/clearAll</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/keyChainKey:key:</TokenIdentifier>
			<Abstract type="html">Get a namespaced keychain key given a namespace and key</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (NSString *)keyChainKey:(NSString *)namespace key:(const NSString *)key</Declaration>
			
			
			<Anchor>//api/name/keyChainKey:key:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/updateUsernameAndPersistTokens:</TokenIdentifier>
			<Abstract type="html">Update the username and persist session tokens in the keychain</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (void)updateUsernameAndPersistTokens:(AWSCognitoAuthUserSession *)session</Declaration>
			
			
			<Anchor>//api/name/updateUsernameAndPersistTokens:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/asfDeviceId</TokenIdentifier>
			<Abstract type="html">Get the device id if Advanced Security Feature is turned on</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (NSString *)asfDeviceId</Declaration>
			
			
			<Anchor>//api/name/asfDeviceId</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/getError:code:</TokenIdentifier>
			<Abstract type="html">Helper for getting errors</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (NSError *)getError:(NSString *)error code:(AWSCognitoAuthClientErrorType)code</Declaration>
			
			
			<Anchor>//api/name/getError:code:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoAuth/normalizeScopes</TokenIdentifier>
			<Abstract type="html">Sort scopes in lexigraphical order and join them with a space character.</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>- (NSString *)normalizeScopes</Declaration>
			
			
			<Anchor>//api/name/normalizeScopes</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSCognitoAuth/objectForKey:</TokenIdentifier>
			<Abstract type="html">Get an object from the instanceDictionary</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>+ (id)objectForKey:(id)aKey</Declaration>
			
			
			<Anchor>//api/name/objectForKey:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSCognitoAuth/removeObjectForKey:</TokenIdentifier>
			<Abstract type="html">Remove an object from the instanceDictionary</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>+ (void)removeObjectForKey:(id)aKey</Declaration>
			
			
			<Anchor>//api/name/removeObjectForKey:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSCognitoAuth/setObject:forKey:</TokenIdentifier>
			<Abstract type="html">Set an object in the instanceDictionary</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>+ (void)setObject:(id)anObject forKey:(id&lt;NSCopying&gt;)aKey</Declaration>
			
			
			<Anchor>//api/name/setObject:forKey:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSCognitoAuth/userAgent</TokenIdentifier>
			<Abstract type="html">Generate the user agent string</Abstract>
			<DeclaredIn>AWSCognitoAuth.m</DeclaredIn>
			
			<Declaration>+ (NSString *)userAgent</Declaration>
			
			
			<Anchor>//api/name/userAgent</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
        
        
	</File>
</Tokens>