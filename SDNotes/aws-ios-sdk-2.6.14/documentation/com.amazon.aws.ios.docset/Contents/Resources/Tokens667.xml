<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSGoogleSignInProvider.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSGoogleSignInProvider</TokenIdentifier>
			<Abstract type="html">AWSGoogleSignInProvider adopts the AWSSignInProvider protocol.</Abstract>
			<DeclaredIn>AWSGoogleSignInProvider.h</DeclaredIn>
            
			
			<NodeRef refid="667"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSGoogleSignInProvider/sharedInstance</TokenIdentifier>
			<Abstract type="html">Fetches the shared instance for AWSGoogleSignInProvider.</Abstract>
			<DeclaredIn>AWSGoogleSignInProvider.h</DeclaredIn>
			
			<Declaration>+ (instancetype)sharedInstance</Declaration>
			
			<ReturnValue><Abstract type="html">the single instance of AWSGoogleSignInProvider</Abstract></ReturnValue>
			<Anchor>//api/name/sharedInstance</Anchor>
            <NodeRef refid="667"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSGoogleSignInProvider/setScopes:</TokenIdentifier>
			<Abstract type="html">Sets the scopes required by the app during login.
Defaults are openid and profile.</Abstract>
			<DeclaredIn>AWSGoogleSignInProvider.h</DeclaredIn>
			
			<Declaration>- (void)setScopes:(NSArray *)scopes</Declaration>
			
			
			<Anchor>//api/name/setScopes:</Anchor>
            <NodeRef refid="667"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSGoogleSignInProvider/setViewControllerForGoogleSignIn:</TokenIdentifier>
			<Abstract type="html">Sets the ViewController used for Google SignIn.
Defaults to rootViewController in keyWindow during signin.</Abstract>
			<DeclaredIn>AWSGoogleSignInProvider.h</DeclaredIn>
			
			<Declaration>- (void)setViewControllerForGoogleSignIn:(UIViewController *)signInViewController</Declaration>
			
			
			<Anchor>//api/name/setViewControllerForGoogleSignIn:</Anchor>
            <NodeRef refid="667"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSGoogleSignInProvider/isLoggedIn</TokenIdentifier>
			<Abstract type="html">Determines if a user is logged in.</Abstract>
			<DeclaredIn>AWSGoogleSignInProvider.m</DeclaredIn>
			
			<Declaration>- (BOOL)isLoggedIn</Declaration>
			
			
			<Anchor>//api/name/isLoggedIn</Anchor>
            <NodeRef refid="667"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSGoogleSignInProvider/reloadSession</TokenIdentifier>
			<Abstract type="html">The handler method for managing the session reload for the Sign-In Provider.
The completionHandler will bubble back errors to the developers.</Abstract>
			<DeclaredIn>AWSGoogleSignInProvider.m</DeclaredIn>
			
			<Declaration>- (void)reloadSession</Declaration>
			
			
			<Anchor>//api/name/reloadSession</Anchor>
            <NodeRef refid="667"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSGoogleSignInProvider/login:</TokenIdentifier>
			<Abstract type="html">The login handler method for the Sign-In Provider.
The completionHandler will bubble back errors to the developers.</Abstract>
			<DeclaredIn>AWSGoogleSignInProvider.m</DeclaredIn>
			
			<Declaration>- (void)login:(AWSSignInManagerCompletionBlock)completionHandler</Declaration>
			
			
			<Anchor>//api/name/login:</Anchor>
            <NodeRef refid="667"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSGoogleSignInProvider/logout</TokenIdentifier>
			<Abstract type="html">The logout handler method for the Sign-In Provider.</Abstract>
			<DeclaredIn>AWSGoogleSignInProvider.m</DeclaredIn>
			
			<Declaration>- (void)logout</Declaration>
			
			
			<Anchor>//api/name/logout</Anchor>
            <NodeRef refid="667"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSGoogleSignInProvider/interceptApplication:didFinishLaunchingWithOptions:</TokenIdentifier>
			<Abstract type="html">Passes parameters used to launch the application to the current identity provider. For some
third party providers, this completes the User Sign-in call flow, which used a browser to
get information from the user, directly. The current sign-in provider will be set to nil if
the sign-in provider is not registered using registerAWSSignInProvider:forKey method  of
AWSSignInProviderFactory class.</Abstract>
			<DeclaredIn>AWSGoogleSignInProvider.m</DeclaredIn>
			
			<Declaration>- (BOOL)interceptApplication:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</Declaration>
			<Parameters>
				<Parameter>
					<Name>application</Name>
					<Abstract type="html">application</Abstract>
				</Parameter><Parameter>
					<Name>launchOptions</Name>
					<Abstract type="html">options used to launch the application</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">true if this call handled the operation</Abstract></ReturnValue>
			<Anchor>//api/name/interceptApplication:didFinishLaunchingWithOptions:</Anchor>
            <NodeRef refid="667"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSGoogleSignInProvider/interceptApplication:openURL:sourceApplication:annotation:</TokenIdentifier>
			<Abstract type="html">Passes parameters used to launch the application to the current identity provider. For some
third party providers, this completes the User Sign-in call flow, which used a browser to
get information from the user, directly.</Abstract>
			<DeclaredIn>AWSGoogleSignInProvider.m</DeclaredIn>
			
			<Declaration>- (BOOL)interceptApplication:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation</Declaration>
			<Parameters>
				<Parameter>
					<Name>application</Name>
					<Abstract type="html">application</Abstract>
				</Parameter><Parameter>
					<Name>url</Name>
					<Abstract type="html">url used to open the application</Abstract>
				</Parameter><Parameter>
					<Name>sourceApplication</Name>
					<Abstract type="html">source application</Abstract>
				</Parameter><Parameter>
					<Name>annotation</Name>
					<Abstract type="html">annotation</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">true if this call handled the operation</Abstract></ReturnValue>
			<Anchor>//api/name/interceptApplication:openURL:sourceApplication:annotation:</Anchor>
            <NodeRef refid="667"/>
		</Token>
		
        
        
	</File>
</Tokens>