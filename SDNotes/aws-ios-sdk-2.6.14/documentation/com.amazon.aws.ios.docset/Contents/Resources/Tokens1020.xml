<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSLogsPutSubscriptionFilterRequest.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSLogsPutSubscriptionFilterRequest</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AWSLogsModel.h</DeclaredIn>
            
			
			<NodeRef refid="1020"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLogsPutSubscriptionFilterRequest/setDestinationArn:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The ARN of the destination to deliver matching log events to. Currently, the supported destinations are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;An Amazon Kinesis stream belonging to the same account as the subscription filter, for same-account delivery.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A logical destination (specified using an ARN) belonging to a different account, for cross-account delivery.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;An Amazon Kinesis Firehose stream belonging to the same account as the subscription filter, for same-account delivery.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;An AWS Lambda function belonging to the same account as the subscription filter, for same-account delivery.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSLogsModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *destinationArn</Declaration>
			
			
			<Anchor>//api/name/destinationArn</Anchor>
            <NodeRef refid="1020"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLogsPutSubscriptionFilterRequest/destinationArn</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The ARN of the destination to deliver matching log events to. Currently, the supported destinations are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;An Amazon Kinesis stream belonging to the same account as the subscription filter, for same-account delivery.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A logical destination (specified using an ARN) belonging to a different account, for cross-account delivery.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;An Amazon Kinesis Firehose stream belonging to the same account as the subscription filter, for same-account delivery.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;An AWS Lambda function belonging to the same account as the subscription filter, for same-account delivery.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSLogsModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *destinationArn</Declaration>
			
			
			<Anchor>//api/name/destinationArn</Anchor>
            <NodeRef refid="1020"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLogsPutSubscriptionFilterRequest/destinationArn</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The ARN of the destination to deliver matching log events to. Currently, the supported destinations are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;An Amazon Kinesis stream belonging to the same account as the subscription filter, for same-account delivery.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A logical destination (specified using an ARN) belonging to a different account, for cross-account delivery.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;An Amazon Kinesis Firehose stream belonging to the same account as the subscription filter, for same-account delivery.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;An AWS Lambda function belonging to the same account as the subscription filter, for same-account delivery.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSLogsModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *destinationArn</Declaration>
			
			
			<Anchor>//api/name/destinationArn</Anchor>
            <NodeRef refid="1020"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLogsPutSubscriptionFilterRequest/setDistribution:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The method used to distribute log data to the destination, when the destination is an Amazon Kinesis stream. By default, log data is grouped by log stream. For a more even distribution, you can group log data randomly.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLogsModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSLogsDistribution distribution</Declaration>
			
			
			<Anchor>//api/name/distribution</Anchor>
            <NodeRef refid="1020"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLogsPutSubscriptionFilterRequest/distribution</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The method used to distribute log data to the destination, when the destination is an Amazon Kinesis stream. By default, log data is grouped by log stream. For a more even distribution, you can group log data randomly.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLogsModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSLogsDistribution distribution</Declaration>
			
			
			<Anchor>//api/name/distribution</Anchor>
            <NodeRef refid="1020"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLogsPutSubscriptionFilterRequest/distribution</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The method used to distribute log data to the destination, when the destination is an Amazon Kinesis stream. By default, log data is grouped by log stream. For a more even distribution, you can group log data randomly.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLogsModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSLogsDistribution distribution</Declaration>
			
			
			<Anchor>//api/name/distribution</Anchor>
            <NodeRef refid="1020"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLogsPutSubscriptionFilterRequest/setFilterName:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A name for the subscription filter.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLogsModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *filterName</Declaration>
			
			
			<Anchor>//api/name/filterName</Anchor>
            <NodeRef refid="1020"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLogsPutSubscriptionFilterRequest/filterName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A name for the subscription filter.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLogsModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *filterName</Declaration>
			
			
			<Anchor>//api/name/filterName</Anchor>
            <NodeRef refid="1020"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLogsPutSubscriptionFilterRequest/filterName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A name for the subscription filter.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLogsModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *filterName</Declaration>
			
			
			<Anchor>//api/name/filterName</Anchor>
            <NodeRef refid="1020"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLogsPutSubscriptionFilterRequest/setFilterPattern:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A filter pattern for subscribing to a filtered stream of log events.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLogsModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *filterPattern</Declaration>
			
			
			<Anchor>//api/name/filterPattern</Anchor>
            <NodeRef refid="1020"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLogsPutSubscriptionFilterRequest/filterPattern</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A filter pattern for subscribing to a filtered stream of log events.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLogsModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *filterPattern</Declaration>
			
			
			<Anchor>//api/name/filterPattern</Anchor>
            <NodeRef refid="1020"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLogsPutSubscriptionFilterRequest/filterPattern</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A filter pattern for subscribing to a filtered stream of log events.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLogsModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *filterPattern</Declaration>
			
			
			<Anchor>//api/name/filterPattern</Anchor>
            <NodeRef refid="1020"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLogsPutSubscriptionFilterRequest/setLogGroupName:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name of the log group.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLogsModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *logGroupName</Declaration>
			
			
			<Anchor>//api/name/logGroupName</Anchor>
            <NodeRef refid="1020"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLogsPutSubscriptionFilterRequest/logGroupName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name of the log group.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLogsModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *logGroupName</Declaration>
			
			
			<Anchor>//api/name/logGroupName</Anchor>
            <NodeRef refid="1020"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLogsPutSubscriptionFilterRequest/logGroupName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name of the log group.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLogsModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *logGroupName</Declaration>
			
			
			<Anchor>//api/name/logGroupName</Anchor>
            <NodeRef refid="1020"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLogsPutSubscriptionFilterRequest/setRoleArn:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don&apos;t need to provide the ARN when you are working with a logical destination for cross-account delivery.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLogsModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *roleArn</Declaration>
			
			
			<Anchor>//api/name/roleArn</Anchor>
            <NodeRef refid="1020"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLogsPutSubscriptionFilterRequest/roleArn</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don&apos;t need to provide the ARN when you are working with a logical destination for cross-account delivery.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLogsModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *roleArn</Declaration>
			
			
			<Anchor>//api/name/roleArn</Anchor>
            <NodeRef refid="1020"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLogsPutSubscriptionFilterRequest/roleArn</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don&apos;t need to provide the ARN when you are working with a logical destination for cross-account delivery.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLogsModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *roleArn</Declaration>
			
			
			<Anchor>//api/name/roleArn</Anchor>
            <NodeRef refid="1020"/>
		</Token>
		
        
        
	</File>
</Tokens>