<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSPinpointEvent.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSPinpointEvent</TokenIdentifier>
			<Abstract type="html">Represents an analytics event. An event must have an event type.</Abstract>
			<DeclaredIn>AWSPinpointEvent.h</DeclaredIn>
            
			
			<NodeRef refid="1055"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSPinpointEvent/setEventType:</TokenIdentifier>
			<Abstract type="html">Returns the name/type of this AWSPinpointEvent.</Abstract>
			<DeclaredIn>AWSPinpointEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSString *eventType</Declaration>
			
			<ReturnValue><Abstract type="html">the name/type of this AWSPinpointEvent.</Abstract></ReturnValue>
			<Anchor>//api/name/eventType</Anchor>
            <NodeRef refid="1055"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSPinpointEvent/eventType</TokenIdentifier>
			<Abstract type="html">Returns the name/type of this AWSPinpointEvent.</Abstract>
			<DeclaredIn>AWSPinpointEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSString *eventType</Declaration>
			
			<ReturnValue><Abstract type="html">the name/type of this AWSPinpointEvent.</Abstract></ReturnValue>
			<Anchor>//api/name/eventType</Anchor>
            <NodeRef refid="1055"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSPinpointEvent/eventType</TokenIdentifier>
			<Abstract type="html">Returns the name/type of this AWSPinpointEvent.</Abstract>
			<DeclaredIn>AWSPinpointEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSString *eventType</Declaration>
			
			<ReturnValue><Abstract type="html">the name/type of this AWSPinpointEvent.</Abstract></ReturnValue>
			<Anchor>//api/name/eventType</Anchor>
            <NodeRef refid="1055"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSPinpointEvent/setEventTimestamp:</TokenIdentifier>
			<Abstract type="html">Returns the timestamp of the event.</Abstract>
			<DeclaredIn>AWSPinpointEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) UTCTimeMillis eventTimestamp</Declaration>
			
			<ReturnValue><Abstract type="html">the timestamp of this AWSPinpointEvent.</Abstract></ReturnValue>
			<Anchor>//api/name/eventTimestamp</Anchor>
            <NodeRef refid="1055"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSPinpointEvent/eventTimestamp</TokenIdentifier>
			<Abstract type="html">Returns the timestamp of the event.</Abstract>
			<DeclaredIn>AWSPinpointEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) UTCTimeMillis eventTimestamp</Declaration>
			
			<ReturnValue><Abstract type="html">the timestamp of this AWSPinpointEvent.</Abstract></ReturnValue>
			<Anchor>//api/name/eventTimestamp</Anchor>
            <NodeRef refid="1055"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSPinpointEvent/eventTimestamp</TokenIdentifier>
			<Abstract type="html">Returns the timestamp of the event.</Abstract>
			<DeclaredIn>AWSPinpointEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) UTCTimeMillis eventTimestamp</Declaration>
			
			<ReturnValue><Abstract type="html">the timestamp of this AWSPinpointEvent.</Abstract></ReturnValue>
			<Anchor>//api/name/eventTimestamp</Anchor>
            <NodeRef refid="1055"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSPinpointEvent/setSession:</TokenIdentifier>
			<Abstract type="html">Returns the sesion of the event.
The session should be populated with the current session in AWSPinpointSessionClient. If no session exists a session is started.</Abstract>
			<DeclaredIn>AWSPinpointEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) AWSPinpointSession *session</Declaration>
			
			<ReturnValue><Abstract type="html">the session of this AWSPinpointEvent.</Abstract></ReturnValue>
			<Anchor>//api/name/session</Anchor>
            <NodeRef refid="1055"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSPinpointEvent/session</TokenIdentifier>
			<Abstract type="html">Returns the sesion of the event.
The session should be populated with the current session in AWSPinpointSessionClient. If no session exists a session is started.</Abstract>
			<DeclaredIn>AWSPinpointEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) AWSPinpointSession *session</Declaration>
			
			<ReturnValue><Abstract type="html">the session of this AWSPinpointEvent.</Abstract></ReturnValue>
			<Anchor>//api/name/session</Anchor>
            <NodeRef refid="1055"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSPinpointEvent/session</TokenIdentifier>
			<Abstract type="html">Returns the sesion of the event.
The session should be populated with the current session in AWSPinpointSessionClient. If no session exists a session is started.</Abstract>
			<DeclaredIn>AWSPinpointEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) AWSPinpointSession *session</Declaration>
			
			<ReturnValue><Abstract type="html">the session of this AWSPinpointEvent.</Abstract></ReturnValue>
			<Anchor>//api/name/session</Anchor>
            <NodeRef refid="1055"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSPinpointEvent/initWithEventType:session:</TokenIdentifier>
			<Abstract type="html">Initializes an event object with specified type and the current timestamp.</Abstract>
			<DeclaredIn>AWSPinpointEvent.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithEventType:(NSString *)theEventType session:(AWSPinpointSession *)session</Declaration>
			<Parameters>
				<Parameter>
					<Name>theEventType</Name>
					<Abstract type="html">The name/type of the event.</Abstract>
				</Parameter><Parameter>
					<Name>session</Name>
					<Abstract type="html">The session object. Should be retrieved from AWSPinpointSessionClient</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithEventType:session:</Anchor>
            <NodeRef refid="1055"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSPinpointEvent/initWithEventType:eventTimestamp:session:</TokenIdentifier>
			<Abstract type="html">Initializes an event object with specified type and timestamp.</Abstract>
			<DeclaredIn>AWSPinpointEvent.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithEventType:(NSString *)theEventType eventTimestamp:(UTCTimeMillis)theEventTimestamp session:(AWSPinpointSession *)session</Declaration>
			<Parameters>
				<Parameter>
					<Name>theEventType</Name>
					<Abstract type="html">The name/type of the event.</Abstract>
				</Parameter><Parameter>
					<Name>theEventTimestamp</Name>
					<Abstract type="html">The timestamp of the event.</Abstract>
				</Parameter><Parameter>
					<Name>session</Name>
					<Abstract type="html">The session object. Should be retrieved from AWSPinpointSessionClient</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithEventType:eventTimestamp:session:</Anchor>
            <NodeRef refid="1055"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSPinpointEvent/addAttribute:forKey:</TokenIdentifier>
			<Abstract type="html">Adds an attribute to this AWSPinpointEvent with the specified key. Only 50 attributes/metrics.
are allowed to be added to an AWSPinpointEvent. If 50 attributes/metrics already exist on this AWSPinpointEvent, the call is ignored.</Abstract>
			<DeclaredIn>AWSPinpointEvent.h</DeclaredIn>
			
			<Declaration>- (void)addAttribute:(NSString *)theValue forKey:(NSString *)theKey</Declaration>
			<Parameters>
				<Parameter>
					<Name>theValue</Name>
					<Abstract type="html">The value of the attribute. The value will be truncated if it exceeds 200 characters.</Abstract>
				</Parameter><Parameter>
					<Name>theKey</Name>
					<Abstract type="html">The key of the attribute. The key will be truncated if it exceeds 50 characters.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addAttribute:forKey:</Anchor>
            <NodeRef refid="1055"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSPinpointEvent/addMetric:forKey:</TokenIdentifier>
			<Abstract type="html">Adds a metric to this AWSPinpointEvent with the specified key. Only 50 attributes/metrics.
are allowed to be added to an AWSPinpointEvent. If 50 attribute/metrics already exist on this AWSPinpointEvent, the call is ignored.</Abstract>
			<DeclaredIn>AWSPinpointEvent.h</DeclaredIn>
			
			<Declaration>- (void)addMetric:(NSNumber *)theValue forKey:(NSString *)theKey</Declaration>
			<Parameters>
				<Parameter>
					<Name>theValue</Name>
					<Abstract type="html">The value of the metric.</Abstract>
				</Parameter><Parameter>
					<Name>theKey</Name>
					<Abstract type="html">The key of the metric. The key will be truncated if it exceeds 50 characters.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addMetric:forKey:</Anchor>
            <NodeRef refid="1055"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSPinpointEvent/attributeForKey:</TokenIdentifier>
			<Abstract type="html">Returns the value of the attribute with the specified key.</Abstract>
			<DeclaredIn>AWSPinpointEvent.h</DeclaredIn>
			
			<Declaration>- (NSString *)attributeForKey:(NSString *)theKey</Declaration>
			<Parameters>
				<Parameter>
					<Name>theKey</Name>
					<Abstract type="html">The key of the attribute to return.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The attribute with the specified key, or null if attribute does not exist.</Abstract></ReturnValue>
			<Anchor>//api/name/attributeForKey:</Anchor>
            <NodeRef refid="1055"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSPinpointEvent/metricForKey:</TokenIdentifier>
			<Abstract type="html">Returns the value of the metric with the specified key.</Abstract>
			<DeclaredIn>AWSPinpointEvent.h</DeclaredIn>
			
			<Declaration>- (NSNumber *)metricForKey:(NSString *)theKey</Declaration>
			<Parameters>
				<Parameter>
					<Name>theKey</Name>
					<Abstract type="html">The key of the metric to return.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The metric with the specified key, or null if metric does not exist.</Abstract></ReturnValue>
			<Anchor>//api/name/metricForKey:</Anchor>
            <NodeRef refid="1055"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSPinpointEvent/hasAttributeForKey:</TokenIdentifier>
			<Abstract type="html">Determines if this AWSPinpointEvent contains a specific attribute.</Abstract>
			<DeclaredIn>AWSPinpointEvent.h</DeclaredIn>
			
			<Declaration>- (BOOL)hasAttributeForKey:(NSString *)theKey</Declaration>
			<Parameters>
				<Parameter>
					<Name>theKey</Name>
					<Abstract type="html">The key of the attribute</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if this AWSPinpointEvent has an attribute with the specified key, NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/hasAttributeForKey:</Anchor>
            <NodeRef refid="1055"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSPinpointEvent/hasMetricForKey:</TokenIdentifier>
			<Abstract type="html">Determines if this AWSPinpointEvent contains a specific metric.</Abstract>
			<DeclaredIn>AWSPinpointEvent.h</DeclaredIn>
			
			<Declaration>- (BOOL)hasMetricForKey:(NSString *)theKey</Declaration>
			<Parameters>
				<Parameter>
					<Name>theKey</Name>
					<Abstract type="html">The key of the metric</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if this AWSPinpointEvent has a metric with the specified key, NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/hasMetricForKey:</Anchor>
            <NodeRef refid="1055"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSPinpointEvent/allAttributes</TokenIdentifier>
			<Abstract type="html">Returns an NSDictionary of all attributes contained within this AWSPinpointEvent.</Abstract>
			<DeclaredIn>AWSPinpointEvent.h</DeclaredIn>
			
			<Declaration>- (NSDictionary *)allAttributes</Declaration>
			
			<ReturnValue><Abstract type="html">an NSDictionary of all attributes, where the attribute keys are the keys and the attribute values are the values.</Abstract></ReturnValue>
			<Anchor>//api/name/allAttributes</Anchor>
            <NodeRef refid="1055"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSPinpointEvent/allMetrics</TokenIdentifier>
			<Abstract type="html">Returns an NSDictionary of all metrics contained within this AWSPinpointEvent.</Abstract>
			<DeclaredIn>AWSPinpointEvent.h</DeclaredIn>
			
			<Declaration>- (NSDictionary *)allMetrics</Declaration>
			
			<ReturnValue><Abstract type="html">an NSDictionary of all metrics, where the metric keys are the keys and the metric values are the values.</Abstract></ReturnValue>
			<Anchor>//api/name/allMetrics</Anchor>
            <NodeRef refid="1055"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSPinpointEvent/toDictionary</TokenIdentifier>
			<Abstract type="html">Returns an NSDictionary representation of this object.</Abstract>
			<DeclaredIn>AWSPinpointEvent.h</DeclaredIn>
			
			<Declaration>- (NSDictionary *)toDictionary</Declaration>
			
			<ReturnValue><Abstract type="html">an NSDictionary representation of this AWSPinpointEvent object.</Abstract></ReturnValue>
			<Anchor>//api/name/toDictionary</Anchor>
            <NodeRef refid="1055"/>
		</Token>
		
        
        
	</File>
</Tokens>