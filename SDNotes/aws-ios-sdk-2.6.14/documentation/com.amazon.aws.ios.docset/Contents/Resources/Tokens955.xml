<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSLex.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSLex</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says &quot;I want pizza&quot;, your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexService.h</DeclaredIn>
            
			
			<NodeRef refid="955"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLex/setConfiguration:</TokenIdentifier>
			<Abstract type="html">The service configuration used to instantiate this service client.</Abstract>
			<DeclaredIn>AWSLexInteractionKit.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) AWSServiceConfiguration *configuration</Declaration>
			
			
			<Anchor>//api/name/configuration</Anchor>
            <NodeRef refid="955"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLex/configuration</TokenIdentifier>
			<Abstract type="html">The service configuration used to instantiate this service client.</Abstract>
			<DeclaredIn>AWSLexInteractionKit.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) AWSServiceConfiguration *configuration</Declaration>
			
			
			<Anchor>//api/name/configuration</Anchor>
            <NodeRef refid="955"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLex/configuration</TokenIdentifier>
			<Abstract type="html">The service configuration used to instantiate this service client.</Abstract>
			<DeclaredIn>AWSLexInteractionKit.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) AWSServiceConfiguration *configuration</Declaration>
			
			
			<Anchor>//api/name/configuration</Anchor>
            <NodeRef refid="955"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSLex/defaultLex</TokenIdentifier>
			<Abstract type="html">Returns the singleton service client. If the singleton object does not exist, the SDK instantiates the default service client with defaultServiceConfiguration from [AWSServiceManager defaultServiceManager]. The reference to this object is maintained by the SDK, and you do not need to retain it manually.</Abstract>
			<DeclaredIn>AWSLexService.h</DeclaredIn>
			
			<Declaration>+ (instancetype)defaultLex</Declaration>
			
			<ReturnValue><Abstract type="html">The default service client.</Abstract></ReturnValue>
			<Anchor>//api/name/defaultLex</Anchor>
            <NodeRef refid="955"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSLex/registerLexWithConfiguration:forKey:</TokenIdentifier>
			<Abstract type="html">Creates a service client with the given service configuration and registers it for the key.</Abstract>
			<DeclaredIn>AWSLexService.h</DeclaredIn>
			
			<Declaration>+ (void)registerLexWithConfiguration:(AWSServiceConfiguration *)configuration forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>configuration</Name>
					<Abstract type="html">A service configuration object.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A string to identify the service client.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/registerLexWithConfiguration:forKey:</Anchor>
            <NodeRef refid="955"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSLex/LexForKey:</TokenIdentifier>
			<Abstract type="html">Retrieves the service client associated with the key. You need to call + registerLexWithConfiguration:forKey: before invoking this method.</Abstract>
			<DeclaredIn>AWSLexService.h</DeclaredIn>
			
			<Declaration>+ (instancetype)LexForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A string to identify the service client.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of the service client.</Abstract></ReturnValue>
			<Anchor>//api/name/LexForKey:</Anchor>
            <NodeRef refid="955"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSLex/removeLexForKey:</TokenIdentifier>
			<Abstract type="html">Removes the service client associated with the key and release it.</Abstract>
			<DeclaredIn>AWSLexService.h</DeclaredIn>
			
			<Declaration>+ (void)removeLexForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A string to identify the service client.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeLexForKey:</Anchor>
            <NodeRef refid="955"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLex/postContent:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; Sends user input (text or speech) to Amazon Lex. Clients use this API to send requests to Amazon Lex at runtime. Amazon Lex interprets the user input using the machine learning model that it built for the bot. &lt;/p&gt;&lt;p&gt; In response, Amazon Lex returns the next message to convey to the user. Consider the following example messages: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt; For a user input &quot;I would like a pizza,&quot; Amazon Lex might return a response with a message eliciting slot data (for example, &lt;code&gt;PizzaSize&lt;/code&gt;): &quot;What size pizza would you like?&quot;. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt; After the user provides all of the pizza order information, Amazon Lex might return a response with a message to get user confirmation: &quot;Order the pizza?&quot;. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt; After the user replies &quot;Yes&quot; to the confirmation prompt, Amazon Lex might return a conclusion statement: &quot;Thank you, your cheese pizza has been ordered.&quot;. &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt; Not all Amazon Lex messages require a response from the user. For example, conclusion statements do not require a response. Some messages require only a yes or no response. In addition to the &lt;code&gt;message&lt;/code&gt;, Amazon Lex provides additional context about the message in the response that you can use to enhance client behavior, such as displaying the appropriate client user interface. Consider the following examples: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt; If the message is to elicit slot data, Amazon Lex returns the following context information: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;x-amz-lex-dialog-state&lt;/code&gt; header set to &lt;code&gt;ElicitSlot&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;x-amz-lex-intent-name&lt;/code&gt; header set to the intent name in the current context &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;x-amz-lex-slot-to-elicit&lt;/code&gt; header set to the slot name for which the &lt;code&gt;message&lt;/code&gt; is eliciting information &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;x-amz-lex-slots&lt;/code&gt; header set to a map of slots configured for the intent with their current values &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt; If the message is a confirmation prompt, the &lt;code&gt;x-amz-lex-dialog-state&lt;/code&gt; header is set to &lt;code&gt;Confirmation&lt;/code&gt; and the &lt;code&gt;x-amz-lex-slot-to-elicit&lt;/code&gt; header is omitted. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt; If the message is a clarification prompt configured for the intent, indicating that the user intent is not understood, the &lt;code&gt;x-amz-dialog-state&lt;/code&gt; header is set to &lt;code&gt;ElicitIntent&lt;/code&gt; and the &lt;code&gt;x-amz-slot-to-elicit&lt;/code&gt; header is omitted. &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt; In addition, Amazon Lex also returns your application-specific &lt;code&gt;sessionAttributes&lt;/code&gt;. For more information, see Managing Conversation Context. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSLexPostContentRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSLexPostContentResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSLexPostContentResponse*&gt; *)postContent:(AWSLexPostContentRequest *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the PostContent service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSLexPostContentResponse. On failed execution, task.error may contain an NSError with AWSLexErrorDomain domain and the following error code: AWSLexErrorNotFound, AWSLexErrorBadRequest, AWSLexErrorLimitExceeded, AWSLexErrorInternalFailure, AWSLexErrorConflict, AWSLexErrorUnsupportedMediaType, AWSLexErrorNotAcceptable, AWSLexErrorRequestTimeout, AWSLexErrorDependencyFailed, AWSLexErrorBadGateway, AWSLexErrorLoopDetected.</Abstract></ReturnValue>
			<Anchor>//api/name/postContent:</Anchor>
            <NodeRef refid="955"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLex/postContent:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; Sends user input (text or speech) to Amazon Lex. Clients use this API to send requests to Amazon Lex at runtime. Amazon Lex interprets the user input using the machine learning model that it built for the bot. &lt;/p&gt;&lt;p&gt; In response, Amazon Lex returns the next message to convey to the user. Consider the following example messages: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt; For a user input &quot;I would like a pizza,&quot; Amazon Lex might return a response with a message eliciting slot data (for example, &lt;code&gt;PizzaSize&lt;/code&gt;): &quot;What size pizza would you like?&quot;. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt; After the user provides all of the pizza order information, Amazon Lex might return a response with a message to get user confirmation: &quot;Order the pizza?&quot;. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt; After the user replies &quot;Yes&quot; to the confirmation prompt, Amazon Lex might return a conclusion statement: &quot;Thank you, your cheese pizza has been ordered.&quot;. &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt; Not all Amazon Lex messages require a response from the user. For example, conclusion statements do not require a response. Some messages require only a yes or no response. In addition to the &lt;code&gt;message&lt;/code&gt;, Amazon Lex provides additional context about the message in the response that you can use to enhance client behavior, such as displaying the appropriate client user interface. Consider the following examples: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt; If the message is to elicit slot data, Amazon Lex returns the following context information: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;x-amz-lex-dialog-state&lt;/code&gt; header set to &lt;code&gt;ElicitSlot&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;x-amz-lex-intent-name&lt;/code&gt; header set to the intent name in the current context &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;x-amz-lex-slot-to-elicit&lt;/code&gt; header set to the slot name for which the &lt;code&gt;message&lt;/code&gt; is eliciting information &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;x-amz-lex-slots&lt;/code&gt; header set to a map of slots configured for the intent with their current values &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt; If the message is a confirmation prompt, the &lt;code&gt;x-amz-lex-dialog-state&lt;/code&gt; header is set to &lt;code&gt;Confirmation&lt;/code&gt; and the &lt;code&gt;x-amz-lex-slot-to-elicit&lt;/code&gt; header is omitted. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt; If the message is a clarification prompt configured for the intent, indicating that the user intent is not understood, the &lt;code&gt;x-amz-dialog-state&lt;/code&gt; header is set to &lt;code&gt;ElicitIntent&lt;/code&gt; and the &lt;code&gt;x-amz-slot-to-elicit&lt;/code&gt; header is omitted. &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt; In addition, Amazon Lex also returns your application-specific &lt;code&gt;sessionAttributes&lt;/code&gt;. For more information, see Managing Conversation Context. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSLexPostContentRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSLexPostContentResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)postContent:(AWSLexPostContentRequest *)request completionHandler:(void ( ^ _Nullable ) ( AWSLexPostContentResponse *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the PostContent service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSLexErrorDomain domain and the following error code: AWSLexErrorNotFound, AWSLexErrorBadRequest, AWSLexErrorLimitExceeded, AWSLexErrorInternalFailure, AWSLexErrorConflict, AWSLexErrorUnsupportedMediaType, AWSLexErrorNotAcceptable, AWSLexErrorRequestTimeout, AWSLexErrorDependencyFailed, AWSLexErrorBadGateway, AWSLexErrorLoopDetected.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/postContent:completionHandler:</Anchor>
            <NodeRef refid="955"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLex/postText:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Sends user input (text-only) to Amazon Lex. Client applications can use this API to send requests to Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine learning model it built for the bot. &lt;/p&gt;&lt;p&gt; In response, Amazon Lex returns the next &lt;code&gt;message&lt;/code&gt; to convey to the user an optional &lt;code&gt;responseCard&lt;/code&gt; to display. Consider the following example messages: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt; For a user input &quot;I would like a pizza&quot;, Amazon Lex might return a response with a message eliciting slot data (for example, PizzaSize): &quot;What size pizza would you like?&quot; &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt; After the user provides all of the pizza order information, Amazon Lex might return a response with a message to obtain user confirmation &quot;Proceed with the pizza order?&quot;. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt; After the user replies to a confirmation prompt with a &quot;yes&quot;, Amazon Lex might return a conclusion statement: &quot;Thank you, your cheese pizza has been ordered.&quot;. &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt; Not all Amazon Lex messages require a user response. For example, a conclusion statement does not require a response. Some messages require only a &quot;yes&quot; or &quot;no&quot; user response. In addition to the &lt;code&gt;message&lt;/code&gt;, Amazon Lex provides additional context about the message in the response that you might use to enhance client behavior, for example, to display the appropriate client user interface. These are the &lt;code&gt;slotToElicit&lt;/code&gt;, &lt;code&gt;dialogState&lt;/code&gt;, &lt;code&gt;intentName&lt;/code&gt;, and &lt;code&gt;slots&lt;/code&gt; fields in the response. Consider the following examples: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;If the message is to elicit slot data, Amazon Lex returns the following context information:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;dialogState&lt;/code&gt; set to ElicitSlot &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;intentName&lt;/code&gt; set to the intent name in the current context &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;slotToElicit&lt;/code&gt; set to the slot name for which the &lt;code&gt;message&lt;/code&gt; is eliciting information &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;slots&lt;/code&gt; set to a map of slots, configured for the intent, with currently known values &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt; If the message is a confirmation prompt, the &lt;code&gt;dialogState&lt;/code&gt; is set to ConfirmIntent and &lt;code&gt;SlotToElicit&lt;/code&gt; is set to null. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;If the message is a clarification prompt (configured for the intent) that indicates that user intent is not understood, the &lt;code&gt;dialogState&lt;/code&gt; is set to ElicitIntent and &lt;code&gt;slotToElicit&lt;/code&gt; is set to null. &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt; In addition, Amazon Lex also returns your application-specific &lt;code&gt;sessionAttributes&lt;/code&gt;. For more information, see Managing Conversation Context. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSLexPostTextRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSLexPostTextResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSLexPostTextResponse*&gt; *)postText:(AWSLexPostTextRequest *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the PostText service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSLexPostTextResponse. On failed execution, task.error may contain an NSError with AWSLexErrorDomain domain and the following error code: AWSLexErrorNotFound, AWSLexErrorBadRequest, AWSLexErrorLimitExceeded, AWSLexErrorInternalFailure, AWSLexErrorConflict, AWSLexErrorDependencyFailed, AWSLexErrorBadGateway, AWSLexErrorLoopDetected.</Abstract></ReturnValue>
			<Anchor>//api/name/postText:</Anchor>
            <NodeRef refid="955"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLex/postText:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Sends user input (text-only) to Amazon Lex. Client applications can use this API to send requests to Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine learning model it built for the bot. &lt;/p&gt;&lt;p&gt; In response, Amazon Lex returns the next &lt;code&gt;message&lt;/code&gt; to convey to the user an optional &lt;code&gt;responseCard&lt;/code&gt; to display. Consider the following example messages: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt; For a user input &quot;I would like a pizza&quot;, Amazon Lex might return a response with a message eliciting slot data (for example, PizzaSize): &quot;What size pizza would you like?&quot; &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt; After the user provides all of the pizza order information, Amazon Lex might return a response with a message to obtain user confirmation &quot;Proceed with the pizza order?&quot;. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt; After the user replies to a confirmation prompt with a &quot;yes&quot;, Amazon Lex might return a conclusion statement: &quot;Thank you, your cheese pizza has been ordered.&quot;. &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt; Not all Amazon Lex messages require a user response. For example, a conclusion statement does not require a response. Some messages require only a &quot;yes&quot; or &quot;no&quot; user response. In addition to the &lt;code&gt;message&lt;/code&gt;, Amazon Lex provides additional context about the message in the response that you might use to enhance client behavior, for example, to display the appropriate client user interface. These are the &lt;code&gt;slotToElicit&lt;/code&gt;, &lt;code&gt;dialogState&lt;/code&gt;, &lt;code&gt;intentName&lt;/code&gt;, and &lt;code&gt;slots&lt;/code&gt; fields in the response. Consider the following examples: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;If the message is to elicit slot data, Amazon Lex returns the following context information:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;dialogState&lt;/code&gt; set to ElicitSlot &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;intentName&lt;/code&gt; set to the intent name in the current context &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;slotToElicit&lt;/code&gt; set to the slot name for which the &lt;code&gt;message&lt;/code&gt; is eliciting information &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;slots&lt;/code&gt; set to a map of slots, configured for the intent, with currently known values &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt; If the message is a confirmation prompt, the &lt;code&gt;dialogState&lt;/code&gt; is set to ConfirmIntent and &lt;code&gt;SlotToElicit&lt;/code&gt; is set to null. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;If the message is a clarification prompt (configured for the intent) that indicates that user intent is not understood, the &lt;code&gt;dialogState&lt;/code&gt; is set to ElicitIntent and &lt;code&gt;slotToElicit&lt;/code&gt; is set to null. &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt; In addition, Amazon Lex also returns your application-specific &lt;code&gt;sessionAttributes&lt;/code&gt;. For more information, see Managing Conversation Context. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLexService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSLexPostTextRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSLexPostTextResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)postText:(AWSLexPostTextRequest *)request completionHandler:(void ( ^ _Nullable ) ( AWSLexPostTextResponse *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the PostText service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSLexErrorDomain domain and the following error code: AWSLexErrorNotFound, AWSLexErrorBadRequest, AWSLexErrorLimitExceeded, AWSLexErrorInternalFailure, AWSLexErrorConflict, AWSLexErrorDependencyFailed, AWSLexErrorBadGateway, AWSLexErrorLoopDetected.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/postText:completionHandler:</Anchor>
            <NodeRef refid="955"/>
		</Token>
		
        
        
	</File>
</Tokens>