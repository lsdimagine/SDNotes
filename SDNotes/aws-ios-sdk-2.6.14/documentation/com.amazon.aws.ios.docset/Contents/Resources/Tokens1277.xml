<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSRekognitionGetContentModerationRequest.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSRekognitionGetContentModerationRequest</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AWSRekognitionModel.h</DeclaredIn>
            
			
			<NodeRef refid="1277"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSRekognitionGetContentModerationRequest/setJobId:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The identifier for the content moderation job. Use &lt;code&gt;JobId&lt;/code&gt; to identify the job in a subsequent call to &lt;code&gt;GetContentModeration&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSRekognitionModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *jobId</Declaration>
			
			
			<Anchor>//api/name/jobId</Anchor>
            <NodeRef refid="1277"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSRekognitionGetContentModerationRequest/jobId</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The identifier for the content moderation job. Use &lt;code&gt;JobId&lt;/code&gt; to identify the job in a subsequent call to &lt;code&gt;GetContentModeration&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSRekognitionModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *jobId</Declaration>
			
			
			<Anchor>//api/name/jobId</Anchor>
            <NodeRef refid="1277"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSRekognitionGetContentModerationRequest/jobId</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The identifier for the content moderation job. Use &lt;code&gt;JobId&lt;/code&gt; to identify the job in a subsequent call to &lt;code&gt;GetContentModeration&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSRekognitionModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *jobId</Declaration>
			
			
			<Anchor>//api/name/jobId</Anchor>
            <NodeRef refid="1277"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSRekognitionGetContentModerationRequest/setMaxResults:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Maximum number of content moderation labels to return. The default is 1000.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSRekognitionModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *maxResults</Declaration>
			
			
			<Anchor>//api/name/maxResults</Anchor>
            <NodeRef refid="1277"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSRekognitionGetContentModerationRequest/maxResults</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Maximum number of content moderation labels to return. The default is 1000.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSRekognitionModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *maxResults</Declaration>
			
			
			<Anchor>//api/name/maxResults</Anchor>
            <NodeRef refid="1277"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSRekognitionGetContentModerationRequest/maxResults</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Maximum number of content moderation labels to return. The default is 1000.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSRekognitionModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *maxResults</Declaration>
			
			
			<Anchor>//api/name/maxResults</Anchor>
            <NodeRef refid="1277"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSRekognitionGetContentModerationRequest/setNextToken:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;If the previous response was incomplete (because there is more data to retrieve), Amazon Rekognition returns a pagination token in the response. You can use this pagination token to retrieve the next set of content moderation labels.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSRekognitionModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *nextToken</Declaration>
			
			
			<Anchor>//api/name/nextToken</Anchor>
            <NodeRef refid="1277"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSRekognitionGetContentModerationRequest/nextToken</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;If the previous response was incomplete (because there is more data to retrieve), Amazon Rekognition returns a pagination token in the response. You can use this pagination token to retrieve the next set of content moderation labels.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSRekognitionModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *nextToken</Declaration>
			
			
			<Anchor>//api/name/nextToken</Anchor>
            <NodeRef refid="1277"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSRekognitionGetContentModerationRequest/nextToken</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;If the previous response was incomplete (because there is more data to retrieve), Amazon Rekognition returns a pagination token in the response. You can use this pagination token to retrieve the next set of content moderation labels.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSRekognitionModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *nextToken</Declaration>
			
			
			<Anchor>//api/name/nextToken</Anchor>
            <NodeRef refid="1277"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSRekognitionGetContentModerationRequest/setSortBy:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Sort to use for elements in the &lt;code&gt;ModerationLabelDetections&lt;/code&gt; array. Use &lt;code&gt;TIMESTAMP&lt;/code&gt; to sort array elements by the time labels are detected. Use &lt;code&gt;NAME&lt;/code&gt; to alphabetically group elements for a label together. Within each label group, the array element are sorted by detection confidence. The default sort is by &lt;code&gt;TIMESTAMP&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSRekognitionModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSRekognitionContentModerationSortBy sortBy</Declaration>
			
			
			<Anchor>//api/name/sortBy</Anchor>
            <NodeRef refid="1277"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSRekognitionGetContentModerationRequest/sortBy</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Sort to use for elements in the &lt;code&gt;ModerationLabelDetections&lt;/code&gt; array. Use &lt;code&gt;TIMESTAMP&lt;/code&gt; to sort array elements by the time labels are detected. Use &lt;code&gt;NAME&lt;/code&gt; to alphabetically group elements for a label together. Within each label group, the array element are sorted by detection confidence. The default sort is by &lt;code&gt;TIMESTAMP&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSRekognitionModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSRekognitionContentModerationSortBy sortBy</Declaration>
			
			
			<Anchor>//api/name/sortBy</Anchor>
            <NodeRef refid="1277"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSRekognitionGetContentModerationRequest/sortBy</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Sort to use for elements in the &lt;code&gt;ModerationLabelDetections&lt;/code&gt; array. Use &lt;code&gt;TIMESTAMP&lt;/code&gt; to sort array elements by the time labels are detected. Use &lt;code&gt;NAME&lt;/code&gt; to alphabetically group elements for a label together. Within each label group, the array element are sorted by detection confidence. The default sort is by &lt;code&gt;TIMESTAMP&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSRekognitionModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSRekognitionContentModerationSortBy sortBy</Declaration>
			
			
			<Anchor>//api/name/sortBy</Anchor>
            <NodeRef refid="1277"/>
		</Token>
		
        
        
	</File>
</Tokens>